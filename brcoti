#!/usr/bin/python3
#
# This is a simplistic build script for building artefacts of various
# programming languages natively (eg using pip, npm etc) and upload the
# resulting artefacts to a local repo.
#
#   Copyright (C) 2020 Olaf Kirch <okir@suse.de>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

import sys
import os
import os.path
import io
import pkginfo
import glob
import shutil
import brcoti_core

DEFAULT_BUILD_COMPUTE = "podman"

def create_compute_backend(config, default_backend):
	backend_name = config.command_line_options.compute or default_backend
	return brcoti_core.Compute.factory(backend_name, config)

def source_from_path(engine, name):
	print("=== Using file %s ===" % name)
	sdist = engine.build_info_from_local_file(name)

	if not sdist.is_source:
		print("ERROR: cannot build %s - not a source distribution" % sdist.filename)
		return None

	# DownloadFinder will never return an sdist that
	# requires a python version incompatible with ours.
	# For an sdist provided directly on the command line,
	# it might be nice to check for this explicitly, but that's a
	# lot of work. Not the least because many sdist tarballs
	# do not contain structured build information, but provide
	# a more or less messy setup.py

	return sdist

def find_source(engine, req_string, use_upstream = False):
	print("=== Locating %s in %s repository ===" % (req_string, use_upstream and "upstream" or "rebuild"))
	req = engine.parse_build_requirement(req_string)

	if not use_upstream:
		sdist = engine.build_source_locate(req)
	else:
		sdist = engine.build_source_locate_upstream(req)

	if sdist is None:
		print("FAILED to locate source for %s" % req)
		return None

	return sdist

class BuildJob(object):
	def __init__(self, config, engine, compute_backend, sdist):
		self.config = config
		self.engine = engine
		self.compute_backend = compute_backend
		self.sdist = sdist
		self.build = None
		self.build_state = self.engine.build_state_factory(sdist)

		self.always_commit = False
		self.quiet = False
		self.rebuild_if_needed = False

	def id(self):
		return self.sdist.id()

	def rebuild_required(self):
		if not self.rebuild_if_needed:
			return True

		print("=== Checking whether a rebuild is required ===")
		if not self.build_state.rebuild_required():
			print("=== No rebuild required for %s ===" % self.id())
			return False

		return True

	def unpack_source(self, sdist):
		print("=== Unpacking %s ===" % self.id())

		# Download the source archive if we don't have it yet
		if not sdist.local_path:
			self.engine.downloader.download(sdist)

		# spawn a container/VM or whatever compute node we need
		compute_node = self.engine.prepare_environment(self.compute_backend)

		self.build = self.engine.build_unpack(compute_node, sdist)

		self.build.set_logging(self.quiet, self.build_state.build_log_file())
		return self.build

	def build_package(self):
		print("=== Building %s ===" % self.id())
		build = self.build

		artefacts = build.build()

		if not artefacts:
			raise ValueError("%s: nothing got built" % self.sdist.id())

		return artefacts

	def process_build_dependencies(self):
		print("=== Inspecting build dependencies ===")
		build = self.build

		build.guess_build_dependencies()

		requires = self.engine.finalize_build_depdendencies(build)

		if requires:
			print("Build requirements:")
			for req in requires:
				print("  %-50s via %s" % (req.filename, req))

	def prepare_results(self):
		print("=== Collecting build results ===")
		build = self.build

		build.prepare_results(self.build_state)

	def maybe_commit(self):
		print("=== Checking whether artefacts changed from previous build ===")
		build_state = self.build_state
		build = self.build

		if not self.always_commit and build.unchanged_from_previous_build(build_state):
			print("Artefacts have not changed since previous build")
			return

		uploader = self.engine.uploader
		if uploader:
			print("=== Uploading build results to %s ===" % uploader.describe())
			for p in build.artefacts:
				uploader.upload(p)

			build_state.commit()
			build.cleanup()
		else:
			print("=== Leaving build results in %s ===" % build.location)
			sys.stdout.write(build.build_artefacts_as_string())

		build_state.cleanup()
		self.build_state = None

def prep_action(config, opts):
	engine = brcoti_core.Engine.factory(opts.engine, config, opts)
	compute_backend = create_compute_backend(config, "local")

	exit_code = 0
	for name in opts.packages:
		if os.path.isfile(name):
			sdist = source_from_path(engine, name)
		else:
			sdist = find_source(engine, name, use_upstream = True)
		if sdist is None:
			exit_code = 1
			continue

		if sdist.url:
			print("Using %s" % (sdist.url))

		print("=== Package %s ===" %(sdist.id()))
		job = BuildJob(config, engine, compute_backend, sdist)
		job.quiet = opts.quiet

		try:
			job.unpack_source(sdist)
			job.build_package()
			job.process_build_dependencies()
			job.prepare_results()
			# job.maybe_commit()

		except Exception as e:
			print("FAILED to build %s" % sdist.id())
			import traceback
			print(e)
			traceback.print_tb(sys.exc_info()[2])
			traceback.format_exc()
			exit_code = 1

	print("=== Done ===")
	return exit_code

def build_action(config, opts):
	engine = brcoti_core.Engine.factory(opts.engine, config, opts)
	compute_backend = create_compute_backend(config, DEFAULT_BUILD_COMPUTE)

	exit_code = 0
	for name in opts.packages:
		print("Examining %s" % name)

		if os.path.isfile(name):
			sdist = source_from_path(engine, name)
		else:
			sdist = find_source(engine, name)
		if sdist is None:
			exit_code = 1
			continue

		print("=== Package %s ===" %(sdist.id()))
		job = BuildJob(config, engine, compute_backend, sdist)
		job.always_commit = opts.force
		job.quiet = opts.quiet
		job.rebuild_if_needed = opts.rebuild_if_needed

		try:
			if not job.rebuild_required():
				continue

			job.unpack_source(sdist)
			job.build_package()
			job.process_build_dependencies()
			job.prepare_results()
			job.maybe_commit()

		except Exception as e:
			print("FAILED to build %s" % sdist.id())
			import traceback
			print(e)
			traceback.print_tb(sys.exc_info()[2])
			traceback.format_exc()
			exit_code = 1

	print("=== Done ===")
	return exit_code

def mkindex_action(config, opts):
	engine = brcoti_core.Engine.factory(opts.engine, config, opts)

	print("=== Publishing %s build results ===" % engine.name)
	engine.publish_build_results()

	print("=== Done ===")
	return 0

def build_option_parser():
	import argparse

	parser = argparse.ArgumentParser(prog = "minibuild",
		description = "Build artefacts for various native package managers")

	parser.add_argument('--config', default = [], action = 'append',
		help = "Path to configuration file")

	parser.add_argument('--engine', default = "python3",
		help = "Build engine to use (defaults to python3)")

	parser.add_argument('--debug', default = False, action = 'store_true',
                help = "Enable debugging output")
	parser.add_argument('--quiet', default = False, action = 'store_true',
                help = "Be less verbose")

	parser.add_argument('--compute', default = None,
		help = "Compute backend to use (default is dependent on the action)")

	subparsers = parser.add_subparsers(dest="action",
		title = "action")

	prep_parser = subparsers.add_parser('prep',
		help = "Prepare new source package")

	prep_parser.add_argument('packages', metavar = 'PKG', type = str, nargs = '+',
		help = "List of packages")
	prep_parser.add_argument('--git', default = False, action = 'store_true',
                help = "Build from git repo rather than sdist")

	build_parser = subparsers.add_parser('build',
		help = "Build package(s)")
	build_parser.add_argument('packages', metavar = 'PKG', type = str, nargs = '+',
		help = "List of packages")
	build_parser.add_argument('--git', default = False, action = 'store_true',
                help = "Build from git repo rather than sdist")
	build_parser.add_argument('--rebuild-if-needed', default = False, action = 'store_true',
                help = "Only rebuild package if needed")
	build_parser.add_argument('--force', default = False, action = 'store_true',
                help = "Always store build results, even if they did not change")

	mkindex_parser = subparsers.add_parser('make-index',
		help = "Rebuild package index")
	mkindex_parser.add_argument('--destdir', default = None,
		help = "Specify the destination directory (defaults to working directory)")

	return parser

opts = build_option_parser().parse_args()

config = brcoti_core.Config(opts)
config.load_file("/etc/pybuilder.json")
for config_path in opts.config:
	config.load_file(config_path)

if opts.action == 'prep':
	if not opts.packages:
		print("Nothing to be done.")
		exit(0)

	exit_code = prep_action(config, opts)
elif opts.action == 'build':
	if not opts.packages:
		print("Nothing to be done.")
		exit(0)

	exit_code = build_action(config, opts)
elif opts.action == 'make-index':
	exit_code = mkindex_action(config, opts)
else:
	raise NotImplementedError("Action %s not yet implemented" % opts.action)
exit(exit_code)
